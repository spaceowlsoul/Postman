{
	"info": {
		"_postman_id": "adfb79f5-fe96-4cee-9d99-0de296130f10",
		"name": "Postman_HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20054002"
	},
	"item": [
		{
			"name": "fisrt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"let requiredResponseText = 'This is the first responce from server!';\r",
							"let realResponseText = pm.response.text();\r",
							"pm.test(\"Response body contains 'This is the first responce from server!' string\", function () {\r",
							"    pm.expect(realResponseText).to.include(requiredResponseText);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// console.log(jsonData);\r",
							"// 4. Проверить, что name в ответе равно name из request (name вбить руками).\r",
							"pm.test(\"1) Response name equals to request name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql('Yulia');\r",
							"});\r",
							"// 5. Проверить, что age в ответе равно age из request (age вбить руками).\r",
							"pm.test(\"1) Response age equals to request age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql('26');\r",
							"});\r",
							"// 6. Проверить, что salary в ответе равно salary из request (salary вбить руками).\r",
							"pm.test(\"1) Response salary equals to request salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(1000);\r",
							"});\r",
							"// 7. Спарсить request.\r",
							"let requestBody = request.data;\r",
							"// console.log(requestBody);\r",
							"// 8. Проверить, что name в ответе равно name из request (name забрать из request).\r",
							"pm.test(\"2) Response name equals to request name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(requestBody.name);\r",
							"});\r",
							"// 9. Проверить, что age в ответе равно age из request (age забрать из request).\r",
							"pm.test(\"2) Response age equals to request age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(requestBody.age);\r",
							"});\r",
							"// 10. Проверить, что salary в ответе равно salary из request (salary забрать из request.)\r",
							"pm.test(\"2) Response salary equals to request salary\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData.salary)).to.eql(requestBody.salary);\r",
							"});\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary * 4 (salary забрать из request).\r",
							"let requestSalaryMultipliedBy4 = requestBody.salary * 4;\r",
							"pm.test(\"Response u_salary_1_5_year equals to request salary * 4\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(requestSalaryMultipliedBy4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Yulia",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// console.log(jsonData);\r",
							"// 4. Спарсить request.\r",
							"let requestBody = pm.request.url.query.toObject();\r",
							"// console.log(requestBody);\r",
							"// 5. Проверить, что name в ответе равно name из request (name забрать из request).\r",
							"pm.test(\"Response name equals to request name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(requestBody.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request).\r",
							"pm.test(\"Response age equals to request age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(requestBody.age);\r",
							"});\r",
							"// 7. Проверить, что salary в ответе равно salary из request (salary забрать из request).\r",
							"pm.test(\"Response salary equals to request salary\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData.salary)).to.eql(requestBody.salary);\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog in response contains name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog in response contains age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Dog in response contains name Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog in response contains age equalled 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Yulia&age=26&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Yulia"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// console.log(jsonData);\r",
							"// 4. Спарсить request.\r",
							"let requestBody = pm.request.url.query.toObject();\r",
							"// console.log(requestBody);\r",
							"// 5. Проверить, что name в ответе равно name из request (name забрать из request).\r",
							"pm.test(\"Response name equals to request name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(requestBody.name);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request).\r",
							"pm.test(\"Response age equals to request age\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData.age)).to.eql(requestBody.age);\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(requestBody.salary);\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary);\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0]);\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1]);\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2]);\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request).\r",
							"pm.test(\"Response salary[0] equals to request salary\", function () {\r",
							"    pm.expect(JSON.stringify(jsonData.salary[0])).to.eql(requestBody.salary);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let salaryMultipliedBy2 = JSON.stringify(requestBody.salary * 2);\r",
							"pm.test(\"Response salary[1] equals to request salary * 2\", function () {\r",
							"    pm.expect(jsonData.salary[1]).to.eql(salaryMultipliedBy2);\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request).\r",
							"let salaryMultipliedBy3 = JSON.stringify(requestBody.salary * 3);\r",
							"pm.test(\"Response salary[2] equals to request salary * 3\", function () {\r",
							"    pm.expect(jsonData.salary[2]).to.eql(salaryMultipliedBy3);\r",
							"});\r",
							"// 18. Передать в окружение переменную name.\r",
							"pm.environment.set(\"name\", requestBody.name);\r",
							"// 19. Передать в окружение переменную age.\r",
							"pm.environment.set(\"age\", requestBody.age);\r",
							"// 20. Передать в окружение переменную salary.\r",
							"pm.environment.set(\"salary\", requestBody.salary);\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"let k = 0;\r",
							"while (k < jsonData.salary.length) {\r",
							"    console.log(`${k}: ${jsonData.salary[k]}`);\r",
							"    k++;\r",
							"}\r",
							"// или\r",
							"for (let i in jsonData.salary) {\r",
							"    console.log(`${i}: ${jsonData.salary[i]}`)\r",
							"}\r",
							"// или\r",
							"jsonData.salary.forEach((j) => {console.log(j)});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"// console.log(jsonData);\r",
							"// 7. Спарсить request.\r",
							"let requestBody = request.data;\r",
							"// console.log(requestBody);\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary.\r",
							"pm.test('Response body contains start_qa_salary', function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"    });\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months.\r",
							"pm.test('Response body contains qa_salary_after_6_months', function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"    });\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months.\r",
							"pm.test('Response body contains qa_salary_after_12_months', function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"    });\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year.\r",
							"pm.test('Response body contains qa_salary_after_1.5_year', function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"    });\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years.\r",
							"pm.test('Response body contains qa_salary_after_3.5_year', function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"    });\r",
							"// 13. Проверить, что json response имеет параметр person.\r",
							"pm.test('Response body contains person', function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"    });\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request).\r",
							"pm.test('Response start_qa_salary equals to request salary', function () {\r",
							"    pm.expect(JSON.stringify(jsonData.start_qa_salary)).to.eql(requestBody.salary);\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request).\r",
							"let requestSalaryMultipliedBy2 = requestBody.salary * 2;\r",
							"pm.test('Response qa_salary_after_6_months equals to request salary * 2', function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(requestSalaryMultipliedBy2);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request).\r",
							"let requestSalaryMultipliedBy2_7 = requestBody.salary * 2.7;\r",
							"pm.test('Response qa_salary_after_12_months equals to request salary * 2.7', function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(requestSalaryMultipliedBy2_7);\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request).\r",
							"let requestSalaryMultipliedBy3_3 = requestBody.salary * 3.3;\r",
							"pm.test('Response qa_salary_after_1.5_year equals to request salary * 3.3', function () {\r",
							"pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(requestSalaryMultipliedBy3_3);\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request).\r",
							"let requestSalaryMultipliedBy3_8 = requestBody.salary * 3.8;\r",
							"pm.test('Response qa_salary_after_3.5_years equals to request salary * 3.8', function () {\r",
							"pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(requestSalaryMultipliedBy3_8);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request).\r",
							"pm.test('Response u_name[1] in person equals to request salary', function () {\r",
							"    pm.expect(JSON.stringify(jsonData.person.u_name[1])).to.eql(requestBody.salary);\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request).\r",
							"pm.test('Response u_age[1] equals to request age', function () {\r",
							"    pm.expect(JSON.stringify(jsonData.person.u_age)).to.eql(requestBody.age);\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request).\r",
							"let requestSalaryMultipliedBy4_2 = requestBody.salary * 4.2;\r",
							"pm.test('Response u_salary_5_years equals to request salary * 4.2', function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(requestSalaryMultipliedBy4_2);\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let i in jsonData.person) {\r",
							"    console.log(`${i}: ${jsonData.person[i]}`)\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}